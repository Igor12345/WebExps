Creating new app
dotnet new webapi --name EfWebApp

Trust the HTTPS development certificate by running the following command:
dotnet dev-certs https --trust

dotnet build

 dotnet new classlib -n EfBooksModel
 
 
 dotnet add package Microsoft.EntityFrameworkCore.SqlServer
 
 added Entity Framework Core UI to Rider
 

working with EF from Terminal
 dotnet ef .... -h
 
 dotnet ef migrations add InitialDbCreation

dotnet ef database update DecreaseColumns  //name of the migration to which update Db


docker pull mcr.microsoft.com/mssql/server:2022-latest

docker run -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=1234qwerASDF" -p 1433:1433 --name sql_docker1 --hostname sql_docker1 -d mcr.microsoft.com/mssql/server:2022-latest

connection string:
Server=localhost\sql_docker1,1433;Initial Catalog=EfBooks;User ID=sa;Password=1234qwerASDF;TrustServerCertificate=True


Added Kubernetes﻿ plugin 

#creating a deployment with database
kubectl create -f EfBooksDb.yaml

#get list of all resources
kubectl api-resources

#creating the secret

kubectl create secret generic app1 `
--from-literal=USERNAME=app1login `
--from-literal=PASS=VeryStrong

kubectl create secret generic sql-env `
--from-literal=ACCEPT_EULA=Y `
--from-literal=MSSQL_SA_PASSWORD=1234qwerASDF


After adding b => b.MigrationsAssembly("EfBooksDataAccess") into 
builder.Services.AddDbContext<BooksContext>(options =>
{
    options.UseSqlServer(connection, b => b.MigrationsAssembly("EfBooksDataAccess"));
});

migrations can and should be called from the main (ASP) project


#The command to build a docker image (start from solution)
docker build -f .\EfWebApp\Dockerfile  --tag ef-books-webapp .

#Run docker image
docker run -d -p 8088:80 -p 4443:443 --name ef-books-webapp-cntr ef-books-webapp

#creating Kubernetes﻿ deployment for WA
kubectl create -f .\EfBooksWebApp.yaml


#Set alias in PowerShell
 Set-Alias -Name k8 -Value kubectl

#Installing the Kubernetes Dashboard
https://github.com/DanWahlin/DockerAndKubernetesCourseCode/tree/main/samples/dashboard-security